# -*- coding: UTF-8 -*-

"""
用梯度下降的优化方法来快速解决线性回归问题
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

try:
    print("开始")
    # xrange = xrange  # Python 2
    xrange = range
except:
     # Python 3
     xrange = range

# 构建数据
points_num = 100
vectors = []

# 用 Numpy 的正态随机分布函数生成 100 个点
# 这些点的（x, y）坐标值对应线性方程 y = 0.1 * x + 0.2
# 权重（Weight）为 0.1，偏差（Bias）为 0.2
for i in xrange(points_num):
    x1 = np.random.normal(0.0, 0.66)
    y1 = 0.1 * x1 + 0.2 + np.random.normal(0.0, 0.04)
    vectors.append([x1, y1])

x_data = [v[0] for v in vectors]  # 真实的点的 x 坐标
y_data = [v[1] for v in vectors]  # 真实的点的 y 坐标

# 图像 1 ：展示 100 个随机数据点
plt.plot(x_data, y_data, 'r*', label="Original data")  # 红色星形的点
plt.title("Linear Regression using Gradient Descent")
plt.legend()
plt.show()

# 构建线性回归模型
W = tf.Variable(tf.random_uniform([1], -1.0, 1.0))  # 初始化 Weight
b = tf.Variable(tf.zeros([1]))                      # 初始化 Bias
y = W * x_data + b                                  # 模型计算出来的 y

# 定义 loss function（损失函数）或 cost function（代价函数）
# 对 Tensor 的所有维度计算 ((y - y_data) ^ 2) 之和 / N
loss = tf.reduce_mean(tf.square(y - y_data))

# 用梯度下降的优化器来最小化我们的 loss（损失）
optimizer = tf.train.GradientDescentOptimizer(0.5)  # 设置学习率为 0.5
train = optimizer.minimize(loss)

# 创建会话
sess = tf.Session()

# 初始化数据流图中的所有变量
init = tf.global_variables_initializer()
sess.run(init)

# 训练 20 步
for step in xrange(30):
    # 优化每一步
    sess.run(train)
    # 打印出每一步的损失，权重和偏差
    print("第 {} 步的 损失={}, 权重={}, 偏差={}".format(step+1, sess.run(loss), sess.run(W), sess.run(b)))

# 图像 2 ：绘制所有的点并且绘制出最佳拟合的直线
plt.plot(x_data, y_data, 'r*', label="Original data")  # 红色星形的点
plt.title("Linear Regression using Gradient Descent")  # 标题，表示 "梯度下降解决线性回归"
plt.plot(x_data, sess.run(W) * x_data + sess.run(b), label="Fitted line")  # 拟合的线
print("损失={}, 权重={}, 偏差={}".format(sess.run(loss), sess.run(W), sess.run(b)))
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.show()

# 关闭会话
sess.close()

#
# 第 1 步的 损失=0.06316184252500534, 权重=[0.49565467], 偏差=[0.17323452]
# 第 2 步的 损失=0.02531038038432598, 权重=[0.34323862], 偏差=[0.18359111]
# 第 3 步的 损失=0.010671352036297321, 权重=[0.24847387], 偏差=[0.1903387]
# 第 4 步的 损失=0.005009682849049568, 权重=[0.1895402], 偏差=[0.19453403]
# 第 5 步的 损失=0.0028200214728713036, 权重=[0.15288973], 偏差=[0.19714308]
# 第 6 步的 损失=0.001973166363313794, 权重=[0.13009703], 偏差=[0.19876562]
# 第 7 步的 损失=0.001645643380470574, 权重=[0.1159224], 偏差=[0.19977467]
# 第 8 步的 损失=0.0015189736150205135, 权重=[0.10710728], 偏差=[0.2004022]
# 第 9 步的 损失=0.0014699834864586592, 权重=[0.10162521], 偏差=[0.20079245]
# 第 10 步的 损失=0.0014510366600006819, 权重=[0.09821595], 偏差=[0.20103514]
# 第 11 步的 损失=0.0014437087811529636, 权重=[0.09609576], 偏差=[0.20118608]
# 第 12 步的 损失=0.0014408748829737306, 权重=[0.09477721], 偏差=[0.20127994]
# 第 13 步的 损失=0.00143977883271873, 权重=[0.09395722], 偏差=[0.2013383]
# 第 14 步的 损失=0.0014393548481166363, 权重=[0.09344728], 偏差=[0.2013746]
# 第 15 步的 损失=0.001439190935343504, 权重=[0.09313014], 偏差=[0.20139718]
# 第 16 步的 损失=0.00143912760540843, 权重=[0.09293292], 偏差=[0.20141123]
# 第 17 步的 损失=0.0014391031581908464, 权重=[0.09281027], 偏差=[0.20141996]
# 第 18 步的 损失=0.0014390936121344566, 权重=[0.09273399], 偏差=[0.20142539]
# 第 19 步的 损失=0.0014390897704288363, 权重=[0.09268655], 偏差=[0.20142877]
# 第 20 步的 损失=0.0014390884898602962, 权重=[0.09265705], 偏差=[0.20143086]
# 第 21 步的 损失=0.001439088024199009, 权重=[0.09263871], 偏差=[0.20143217]
# 第 22 步的 损失=0.0014390876749530435, 权重=[0.0926273], 偏差=[0.20143299]
# 第 23 步的 损失=0.0014390875585377216, 权重=[0.0926202], 偏差=[0.2014335]
# 第 24 步的 损失=0.0014390876749530435, 权重=[0.09261579], 偏差=[0.20143381]
# 第 25 步的 损失=0.0014390874421223998, 权重=[0.09261305], 偏差=[0.201434]
# 第 26 步的 损失=0.0014390875585377216, 权重=[0.09261134], 偏差=[0.20143412]
# 第 27 步的 损失=0.0014390876749530435, 权重=[0.09261028], 偏差=[0.2014342]
# 第 28 步的 损失=0.0014390876749530435, 权重=[0.09260961], 偏差=[0.20143424]
# 第 29 步的 损失=0.0014390876749530435, 权重=[0.0926092], 偏差=[0.20143427]
# 第 30 步的 损失=0.0014390876749530435, 权重=[0.09260895], 偏差=[0.20143428]
# 损失=0.0014390876749530435, 权重=[0.09260895], 偏差=[0.20143428]

# 根据这个看到 loss 和 优化器的 选择很重要  最开始已经知道 w=0.1 b=0.2
# 再看一下 极客时间的 视频 判断 是否掌握
